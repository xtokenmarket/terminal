/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface RewardEscrowInterface extends utils.Interface {
  functions: {
    'MAX_VESTING_ENTRIES()': FunctionFragment
    'addRewardsContract(address)': FunctionFragment
    'addRewardsToken(address)': FunctionFragment
    'appendVestingEntry(address,address,address,uint256)': FunctionFragment
    'balanceOf(address,address)': FunctionFragment
    'checkAccountSchedule(address,address,address)': FunctionFragment
    'clrPoolVestingPeriod(address)': FunctionFragment
    'getNextVestingEntry(address,address,address)': FunctionFragment
    'getNextVestingIndex(address,address,address)': FunctionFragment
    'getNextVestingQuantity(address,address,address)': FunctionFragment
    'getNextVestingTime(address,address,address)': FunctionFragment
    'getRewardTokens()': FunctionFragment
    'getVestingQuantity(address,address,address,uint256)': FunctionFragment
    'getVestingScheduleEntry(address,address,address,uint256)': FunctionFragment
    'getVestingTime(address,address,address,uint256)': FunctionFragment
    'isRewardContract(address)': FunctionFragment
    'numVestingEntries(address,address,address)': FunctionFragment
    'owner()': FunctionFragment
    'removeRewardsContract(address)': FunctionFragment
    'removeRewardsToken(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'rewardTokens(uint256)': FunctionFragment
    'setCLRPoolVestingPeriod(address,uint256)': FunctionFragment
    'totalEscrowedAccountBalance(address,address)': FunctionFragment
    'totalEscrowedBalance(address)': FunctionFragment
    'totalSupply(address)': FunctionFragment
    'totalVestedAccountBalance(address,address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'vest(address,address)': FunctionFragment
    'vestingSchedules(address,address,address,uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'MAX_VESTING_ENTRIES',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addRewardsContract',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'addRewardsToken',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'appendVestingEntry',
    values: [string, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'checkAccountSchedule',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'clrPoolVestingPeriod',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getNextVestingEntry',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getNextVestingIndex',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getNextVestingQuantity',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getNextVestingTime',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getRewardTokens',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getVestingQuantity',
    values: [string, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVestingScheduleEntry',
    values: [string, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVestingTime',
    values: [string, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isRewardContract',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'numVestingEntries',
    values: [string, string, string]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeRewardsContract',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'removeRewardsToken',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'rewardTokens',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setCLRPoolVestingPeriod',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'totalEscrowedAccountBalance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'totalEscrowedBalance',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'totalSupply', values: [string]): string
  encodeFunctionData(
    functionFragment: 'totalVestedAccountBalance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'vest', values: [string, string]): string
  encodeFunctionData(
    functionFragment: 'vestingSchedules',
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'MAX_VESTING_ENTRIES',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addRewardsContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addRewardsToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'appendVestingEntry',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'checkAccountSchedule',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'clrPoolVestingPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNextVestingEntry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNextVestingIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNextVestingQuantity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNextVestingTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRewardTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVestingQuantity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVestingScheduleEntry',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVestingTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isRewardContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'numVestingEntries',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeRewardsContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeRewardsToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rewardTokens',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setCLRPoolVestingPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'totalEscrowedAccountBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'totalEscrowedBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalVestedAccountBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vest', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'vestingSchedules',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'RewardContractAdded(address)': EventFragment
    'RewardContractRemoved(address)': EventFragment
    'RewardTokenAdded(address)': EventFragment
    'RewardTokenRemoved(address)': EventFragment
    'Transfer(address,address,address,uint256)': EventFragment
    'Vested(address,address,address,uint256,uint256)': EventFragment
    'VestingEntryCreated(address,address,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardContractAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardContractRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardTokenAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardTokenRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Vested'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VestingEntryCreated'): EventFragment
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export type RewardContractAddedEvent = TypedEvent<
  [string],
  { rewardContract: string }
>

export type RewardContractAddedEventFilter =
  TypedEventFilter<RewardContractAddedEvent>

export type RewardContractRemovedEvent = TypedEvent<
  [string],
  { rewardContract: string }
>

export type RewardContractRemovedEventFilter =
  TypedEventFilter<RewardContractRemovedEvent>

export type RewardTokenAddedEvent = TypedEvent<
  [string],
  { rewardToken: string }
>

export type RewardTokenAddedEventFilter =
  TypedEventFilter<RewardTokenAddedEvent>

export type RewardTokenRemovedEvent = TypedEvent<
  [string],
  { rewardToken: string }
>

export type RewardTokenRemovedEventFilter =
  TypedEventFilter<RewardTokenRemovedEvent>

export type TransferEvent = TypedEvent<
  [string, string, string, BigNumber],
  { token: string; from: string; to: string; value: BigNumber }
>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export type VestedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    pool: string
    token: string
    beneficiary: string
    time: BigNumber
    value: BigNumber
  }
>

export type VestedEventFilter = TypedEventFilter<VestedEvent>

export type VestingEntryCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    pool: string
    token: string
    beneficiary: string
    time: BigNumber
    value: BigNumber
  }
>

export type VestingEntryCreatedEventFilter =
  TypedEventFilter<VestingEntryCreatedEvent>

export interface RewardEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: RewardEscrowInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    MAX_VESTING_ENTRIES(overrides?: CallOverrides): Promise<[BigNumber]>

    addRewardsContract(
      _rewardContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    addRewardsToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    appendVestingEntry(
      token: string,
      account: string,
      pool: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    checkAccountSchedule(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    clrPoolVestingPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getNextVestingEntry(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>

    getNextVestingIndex(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getNextVestingQuantity(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getNextVestingTime(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getRewardTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>

    getVestingQuantity(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getVestingScheduleEntry(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>

    getVestingTime(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    isRewardContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    numVestingEntries(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    removeRewardsContract(
      _rewardContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeRewardsToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    setCLRPoolVestingPeriod(
      pool: string,
      vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    totalEscrowedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    totalEscrowedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    totalSupply(token: string, overrides?: CallOverrides): Promise<[BigNumber]>

    totalVestedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    vest(
      pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    vestingSchedules(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>
  }

  MAX_VESTING_ENTRIES(overrides?: CallOverrides): Promise<BigNumber>

  addRewardsContract(
    _rewardContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  addRewardsToken(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  appendVestingEntry(
    token: string,
    account: string,
    pool: string,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  checkAccountSchedule(
    pool: string,
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  clrPoolVestingPeriod(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getNextVestingEntry(
    pool: string,
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  getNextVestingIndex(
    pool: string,
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getNextVestingQuantity(
    pool: string,
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getNextVestingTime(
    pool: string,
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>

  getVestingQuantity(
    pool: string,
    token: string,
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getVestingScheduleEntry(
    pool: string,
    token: string,
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  getVestingTime(
    pool: string,
    token: string,
    account: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  isRewardContract(arg0: string, overrides?: CallOverrides): Promise<boolean>

  numVestingEntries(
    pool: string,
    token: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  removeRewardsContract(
    _rewardContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeRewardsToken(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  setCLRPoolVestingPeriod(
    pool: string,
    vestingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  totalEscrowedAccountBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  totalEscrowedBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  totalSupply(token: string, overrides?: CallOverrides): Promise<BigNumber>

  totalVestedAccountBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  vest(
    pool: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  vestingSchedules(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  callStatic: {
    MAX_VESTING_ENTRIES(overrides?: CallOverrides): Promise<BigNumber>

    addRewardsContract(
      _rewardContract: string,
      overrides?: CallOverrides
    ): Promise<void>

    addRewardsToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    appendVestingEntry(
      token: string,
      account: string,
      pool: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    checkAccountSchedule(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    clrPoolVestingPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingEntry(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getNextVestingIndex(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingQuantity(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingTime(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>

    getVestingQuantity(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVestingScheduleEntry(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getVestingTime(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isRewardContract(arg0: string, overrides?: CallOverrides): Promise<boolean>

    numVestingEntries(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    removeRewardsContract(
      _rewardContract: string,
      overrides?: CallOverrides
    ): Promise<void>

    removeRewardsToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    setCLRPoolVestingPeriod(
      pool: string,
      vestingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    totalEscrowedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalEscrowedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalSupply(token: string, overrides?: CallOverrides): Promise<BigNumber>

    totalVestedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    vest(pool: string, token: string, overrides?: CallOverrides): Promise<void>

    vestingSchedules(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter

    'RewardContractAdded(address)'(
      rewardContract?: string | null
    ): RewardContractAddedEventFilter
    RewardContractAdded(
      rewardContract?: string | null
    ): RewardContractAddedEventFilter

    'RewardContractRemoved(address)'(
      rewardContract?: string | null
    ): RewardContractRemovedEventFilter
    RewardContractRemoved(
      rewardContract?: string | null
    ): RewardContractRemovedEventFilter

    'RewardTokenAdded(address)'(
      rewardToken?: string | null
    ): RewardTokenAddedEventFilter
    RewardTokenAdded(rewardToken?: string | null): RewardTokenAddedEventFilter

    'RewardTokenRemoved(address)'(
      rewardToken?: string | null
    ): RewardTokenRemovedEventFilter
    RewardTokenRemoved(
      rewardToken?: string | null
    ): RewardTokenRemovedEventFilter

    'Transfer(address,address,address,uint256)'(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter
    Transfer(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter

    'Vested(address,address,address,uint256,uint256)'(
      pool?: string | null,
      token?: string | null,
      beneficiary?: string | null,
      time?: null,
      value?: null
    ): VestedEventFilter
    Vested(
      pool?: string | null,
      token?: string | null,
      beneficiary?: string | null,
      time?: null,
      value?: null
    ): VestedEventFilter

    'VestingEntryCreated(address,address,address,uint256,uint256)'(
      pool?: string | null,
      token?: string | null,
      beneficiary?: string | null,
      time?: null,
      value?: null
    ): VestingEntryCreatedEventFilter
    VestingEntryCreated(
      pool?: string | null,
      token?: string | null,
      beneficiary?: string | null,
      time?: null,
      value?: null
    ): VestingEntryCreatedEventFilter
  }

  estimateGas: {
    MAX_VESTING_ENTRIES(overrides?: CallOverrides): Promise<BigNumber>

    addRewardsContract(
      _rewardContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    addRewardsToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    appendVestingEntry(
      token: string,
      account: string,
      pool: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    balanceOf(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    checkAccountSchedule(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    clrPoolVestingPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingEntry(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingIndex(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingQuantity(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNextVestingTime(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>

    getVestingQuantity(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVestingScheduleEntry(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVestingTime(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isRewardContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numVestingEntries(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    removeRewardsContract(
      _rewardContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeRewardsToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setCLRPoolVestingPeriod(
      pool: string,
      vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    totalEscrowedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalEscrowedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalSupply(token: string, overrides?: CallOverrides): Promise<BigNumber>

    totalVestedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    vest(
      pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    vestingSchedules(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    MAX_VESTING_ENTRIES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    addRewardsContract(
      _rewardContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    addRewardsToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    appendVestingEntry(
      token: string,
      account: string,
      pool: string,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    checkAccountSchedule(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    clrPoolVestingPeriod(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNextVestingEntry(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNextVestingIndex(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNextVestingQuantity(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNextVestingTime(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getVestingQuantity(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVestingScheduleEntry(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVestingTime(
      pool: string,
      token: string,
      account: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isRewardContract(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    numVestingEntries(
      pool: string,
      token: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeRewardsContract(
      _rewardContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeRewardsToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    setCLRPoolVestingPeriod(
      pool: string,
      vestingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    totalEscrowedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalEscrowedBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalSupply(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalVestedAccountBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    vest(
      pool: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    vestingSchedules(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}

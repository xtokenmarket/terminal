/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionTicksStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
};

export type PositionTicksStructOutput = [number, number] & {
  lowerTick: number;
  upperTick: number;
};

export type RewardsProgramStruct = {
  rewardTokens: string[];
  duration: BigNumberish;
  vestingPeriod: BigNumberish;
};

export type RewardsProgramStructOutput = [string[], BigNumber, BigNumber] & {
  rewardTokens: string[];
  duration: BigNumber;
  vestingPeriod: BigNumber;
};

export type PoolDetailsStruct = {
  fee: BigNumberish;
  token0: string;
  token1: string;
  amount0: BigNumberish;
  amount1: BigNumberish;
};

export type PoolDetailsStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  fee: number;
  token0: string;
  token1: string;
  amount0: BigNumber;
  amount1: BigNumber;
};

export type UniswapContractsStruct = {
  router: string;
  quoter: string;
  positionManager: string;
};

export type UniswapContractsStructOutput = [string, string, string] & {
  router: string;
  quoter: string;
  positionManager: string;
};

export interface LMTerminalInterface extends utils.Interface {
  functions: {
    "clrDeployer()": FunctionFragment;
    "deployIncentivizedPool(string,(int24,int24),(address[],uint256,uint256),(uint24,address,address,uint256,uint256))": FunctionFragment;
    "deployUniswapPool(address,address,uint24,uint160)": FunctionFragment;
    "deployedCLRPools(uint256)": FunctionFragment;
    "deploymentFee()": FunctionFragment;
    "getPool(address,address,uint24)": FunctionFragment;
    "initialize(address,address,address,address,address,(address,address,address),uint256,uint256,uint256)": FunctionFragment;
    "initiateNewRewardsProgram(address,uint256[],uint256)": FunctionFragment;
    "initiateRewardsProgram(address,uint256[])": FunctionFragment;
    "positionManager()": FunctionFragment;
    "proxyAdmin()": FunctionFragment;
    "rewardEscrow()": FunctionFragment;
    "rewardFee()": FunctionFragment;
    "tradeFee()": FunctionFragment;
    "uniContracts()": FunctionFragment;
    "uniswapFactory()": FunctionFragment;
    "withdrawFees(address)": FunctionFragment;
    "xTokenManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clrDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployIncentivizedPool",
    values: [
      string,
      PositionTicksStruct,
      RewardsProgramStruct,
      PoolDetailsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployUniswapPool",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedCLRPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      UniswapContractsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateNewRewardsProgram",
    values: [string, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateRewardsProgram",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "tradeFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "uniContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "clrDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployIncentivizedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployUniswapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedCLRPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateNewRewardsProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateRewardsProgram",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tradeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xTokenManager",
    data: BytesLike
  ): Result;

  events: {
    "DeployedIncentivizedPool(address,address,address,uint24,int24,int24)": EventFragment;
    "DeployedUniV3Pool(address,address,address,uint24)": EventFragment;
    "EthFeeWithdraw(uint256)": EventFragment;
    "InitiatedRewardsProgram(address,address[],uint256[],uint256)": EventFragment;
    "TokenFeeWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployedIncentivizedPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployedUniV3Pool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthFeeWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiatedRewardsProgram"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFeeWithdraw"): EventFragment;
}

export type DeployedIncentivizedPoolEvent = TypedEvent<
  [string, string, string, number, number, number],
  {
    clrInstance: string;
    token0: string;
    token1: string;
    fee: number;
    lowerTick: number;
    upperTick: number;
  }
>;

export type DeployedIncentivizedPoolEventFilter =
  TypedEventFilter<DeployedIncentivizedPoolEvent>;

export type DeployedUniV3PoolEvent = TypedEvent<
  [string, string, string, number],
  { pool: string; token0: string; token1: string; fee: number }
>;

export type DeployedUniV3PoolEventFilter =
  TypedEventFilter<DeployedUniV3PoolEvent>;

export type EthFeeWithdrawEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type EthFeeWithdrawEventFilter = TypedEventFilter<EthFeeWithdrawEvent>;

export type InitiatedRewardsProgramEvent = TypedEvent<
  [string, string[], BigNumber[], BigNumber],
  {
    clrInstance: string;
    rewardTokens: string[];
    totalRewardAmounts: BigNumber[];
    rewardsDuration: BigNumber;
  }
>;

export type InitiatedRewardsProgramEventFilter =
  TypedEventFilter<InitiatedRewardsProgramEvent>;

export type TokenFeeWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type TokenFeeWithdrawEventFilter =
  TypedEventFilter<TokenFeeWithdrawEvent>;

export interface LMTerminal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LMTerminalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clrDeployer(overrides?: CallOverrides): Promise<[string]>;

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploymentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _proxyAdmin: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    proxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    rewardEscrow(overrides?: CallOverrides): Promise<[string]>;

    rewardFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniContracts(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        router: string;
        quoter: string;
        positionManager: string;
      }
    >;

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xTokenManager(overrides?: CallOverrides): Promise<[string]>;
  };

  clrDeployer(overrides?: CallOverrides): Promise<string>;

  deployIncentivizedPool(
    symbol: string,
    ticks: PositionTicksStruct,
    rewardsProgram: RewardsProgramStruct,
    pool: PoolDetailsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployUniswapPool(
    token0: string,
    token1: string,
    fee: BigNumberish,
    initPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployedCLRPools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deploymentFee(overrides?: CallOverrides): Promise<BigNumber>;

  getPool(
    token0: string,
    token1: string,
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _xTokenManager: string,
    _rewardEscrow: string,
    _proxyAdmin: string,
    _clrDeployer: string,
    _uniswapFactory: string,
    _uniContracts: UniswapContractsStruct,
    _deploymentFee: BigNumberish,
    _rewardFee: BigNumberish,
    _tradeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateNewRewardsProgram(
    clrPool: string,
    totalRewardAmounts: BigNumberish[],
    rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateRewardsProgram(
    clrPool: string,
    totalRewardAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  proxyAdmin(overrides?: CallOverrides): Promise<string>;

  rewardEscrow(overrides?: CallOverrides): Promise<string>;

  rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

  tradeFee(overrides?: CallOverrides): Promise<BigNumber>;

  uniContracts(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      router: string;
      quoter: string;
      positionManager: string;
    }
  >;

  uniswapFactory(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xTokenManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    clrDeployer(overrides?: CallOverrides): Promise<string>;

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deploymentFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _proxyAdmin: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    proxyAdmin(overrides?: CallOverrides): Promise<string>;

    rewardEscrow(overrides?: CallOverrides): Promise<string>;

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    tradeFee(overrides?: CallOverrides): Promise<BigNumber>;

    uniContracts(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        router: string;
        quoter: string;
        positionManager: string;
      }
    >;

    uniswapFactory(overrides?: CallOverrides): Promise<string>;

    withdrawFees(token: string, overrides?: CallOverrides): Promise<void>;

    xTokenManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DeployedIncentivizedPool(address,address,address,uint24,int24,int24)"(
      clrInstance?: string | null,
      token0?: string | null,
      token1?: string | null,
      fee?: null,
      lowerTick?: null,
      upperTick?: null
    ): DeployedIncentivizedPoolEventFilter;
    DeployedIncentivizedPool(
      clrInstance?: string | null,
      token0?: string | null,
      token1?: string | null,
      fee?: null,
      lowerTick?: null,
      upperTick?: null
    ): DeployedIncentivizedPoolEventFilter;

    "DeployedUniV3Pool(address,address,address,uint24)"(
      pool?: string | null,
      token0?: string | null,
      token1?: string | null,
      fee?: null
    ): DeployedUniV3PoolEventFilter;
    DeployedUniV3Pool(
      pool?: string | null,
      token0?: string | null,
      token1?: string | null,
      fee?: null
    ): DeployedUniV3PoolEventFilter;

    "EthFeeWithdraw(uint256)"(amount?: null): EthFeeWithdrawEventFilter;
    EthFeeWithdraw(amount?: null): EthFeeWithdrawEventFilter;

    "InitiatedRewardsProgram(address,address[],uint256[],uint256)"(
      clrInstance?: string | null,
      rewardTokens?: null,
      totalRewardAmounts?: null,
      rewardsDuration?: null
    ): InitiatedRewardsProgramEventFilter;
    InitiatedRewardsProgram(
      clrInstance?: string | null,
      rewardTokens?: null,
      totalRewardAmounts?: null,
      rewardsDuration?: null
    ): InitiatedRewardsProgramEventFilter;

    "TokenFeeWithdraw(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TokenFeeWithdrawEventFilter;
    TokenFeeWithdraw(
      token?: string | null,
      amount?: null
    ): TokenFeeWithdrawEventFilter;
  };

  estimateGas: {
    clrDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploymentFee(overrides?: CallOverrides): Promise<BigNumber>;

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _proxyAdmin: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    rewardEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    tradeFee(overrides?: CallOverrides): Promise<BigNumber>;

    uniContracts(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xTokenManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    clrDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploymentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _proxyAdmin: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xTokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

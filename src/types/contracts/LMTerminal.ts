/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export type PositionTicksStruct = {
  lowerTick: BigNumberish
  upperTick: BigNumberish
}

export type PositionTicksStructOutput = [number, number] & {
  lowerTick: number
  upperTick: number
}

export type RewardsProgramStruct = {
  rewardTokens: string[]
  duration: BigNumberish
  vestingPeriod: BigNumberish
}

export type RewardsProgramStructOutput = [string[], BigNumber, BigNumber] & {
  rewardTokens: string[]
  duration: BigNumber
  vestingPeriod: BigNumber
}

export type PoolDetailsStruct = {
  fee: BigNumberish
  token0: string
  token1: string
  amount0: BigNumberish
  amount1: BigNumberish
}

export type PoolDetailsStructOutput = [
  number,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  fee: number
  token0: string
  token1: string
  amount0: BigNumber
  amount1: BigNumber
}

export type UniswapContractsStruct = {
  router: string
  quoter: string
  positionManager: string
}

export type UniswapContractsStructOutput = [string, string, string] & {
  router: string
  quoter: string
  positionManager: string
}

export interface LMTerminalInterface extends utils.Interface {
  functions: {
    'claimReward(address)': FunctionFragment
    'clrDeployer()': FunctionFragment
    'deployIncentivizedPool(string,(int24,int24),(address[],uint256,uint256),(uint24,address,address,uint256,uint256),address)': FunctionFragment
    'deployUniswapPool(address,address,uint24,uint160)': FunctionFragment
    'deployedCLRPools(uint256)': FunctionFragment
    'deploymentFee()': FunctionFragment
    'getPool(address,address,uint24)': FunctionFragment
    'initialize(address,address,address,address,(address,address,address),uint256,uint256,uint256)': FunctionFragment
    'initiateNewRewardsProgram(address,uint256[],uint256,bool)': FunctionFragment
    'initiateRewardsProgram(address,uint256[])': FunctionFragment
    'positionManager()': FunctionFragment
    'provideLiquidity(address,uint8,uint256)': FunctionFragment
    'removeLiquidity(address,uint256)': FunctionFragment
    'removeLiquidityAndClaimReward(address,uint256)': FunctionFragment
    'rewardEscrow()': FunctionFragment
    'rewardFee()': FunctionFragment
    'rewardFeesTotal(address)': FunctionFragment
    'tradeFee()': FunctionFragment
    'uniContracts()': FunctionFragment
    'uniswapFactory()': FunctionFragment
    'withdrawClaimFees(address)': FunctionFragment
    'withdrawFees()': FunctionFragment
    'xTokenManager()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'claimReward', values: [string]): string
  encodeFunctionData(
    functionFragment: 'clrDeployer',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'deployIncentivizedPool',
    values: [
      string,
      PositionTicksStruct,
      RewardsProgramStruct,
      PoolDetailsStruct,
      string
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'deployUniswapPool',
    values: [string, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'deployedCLRPools',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'deploymentFee',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getPool',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      UniswapContractsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'initiateNewRewardsProgram',
    values: [string, BigNumberish[], BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'initiateRewardsProgram',
    values: [string, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'positionManager',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'provideLiquidity',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeLiquidity',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeLiquidityAndClaimReward',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'rewardEscrow',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'rewardFee', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rewardFeesTotal',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'tradeFee', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'uniContracts',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'uniswapFactory',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawClaimFees',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'xTokenManager',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clrDeployer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'deployIncentivizedPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'deployUniswapPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'deployedCLRPools',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'deploymentFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'initiateNewRewardsProgram',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'initiateRewardsProgram',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'positionManager',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'provideLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeLiquidityAndClaimReward',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rewardEscrow',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rewardFee', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rewardFeesTotal',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'tradeFee', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'uniContracts',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'uniswapFactory',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawClaimFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'xTokenManager',
    data: BytesLike
  ): Result

  events: {
    'ClaimFeeWithdraw(address,uint256,uint256)': EventFragment
    'ClaimedReward(address,address)': EventFragment
    'DeployedIncentivizedPool(address)': EventFragment
    'DeployedUniV3Pool(address)': EventFragment
    'EthFeeWithdraw(uint256)': EventFragment
    'InitiatedRewardsProgram(address,address[],uint256[],uint256)': EventFragment
    'ManagerSet(address)': EventFragment
    'ProvidedLiquidity(address,address,uint8,uint256)': EventFragment
    'RemovedLiquidity(address,address,uint256)': EventFragment
    'TokenFeeWithdraw(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ClaimFeeWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClaimedReward'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DeployedIncentivizedPool'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DeployedUniV3Pool'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EthFeeWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InitiatedRewardsProgram'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ManagerSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProvidedLiquidity'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemovedLiquidity'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenFeeWithdraw'): EventFragment
}

export type ClaimFeeWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { pool: string; amount0: BigNumber; amount1: BigNumber }
>

export type ClaimFeeWithdrawEventFilter =
  TypedEventFilter<ClaimFeeWithdrawEvent>

export type ClaimedRewardEvent = TypedEvent<
  [string, string],
  { pool: string; sender: string }
>

export type ClaimedRewardEventFilter = TypedEventFilter<ClaimedRewardEvent>

export type DeployedIncentivizedPoolEvent = TypedEvent<
  [string],
  { clrInstance: string }
>

export type DeployedIncentivizedPoolEventFilter =
  TypedEventFilter<DeployedIncentivizedPoolEvent>

export type DeployedUniV3PoolEvent = TypedEvent<[string], { pool: string }>

export type DeployedUniV3PoolEventFilter =
  TypedEventFilter<DeployedUniV3PoolEvent>

export type EthFeeWithdrawEvent = TypedEvent<[BigNumber], { amount: BigNumber }>

export type EthFeeWithdrawEventFilter = TypedEventFilter<EthFeeWithdrawEvent>

export type InitiatedRewardsProgramEvent = TypedEvent<
  [string, string[], BigNumber[], BigNumber],
  {
    clrInstance: string
    rewardTokens: string[]
    totalRewardAmounts: BigNumber[]
    rewardsDuration: BigNumber
  }
>

export type InitiatedRewardsProgramEventFilter =
  TypedEventFilter<InitiatedRewardsProgramEvent>

export type ManagerSetEvent = TypedEvent<[string], { manager: string }>

export type ManagerSetEventFilter = TypedEventFilter<ManagerSetEvent>

export type ProvidedLiquidityEvent = TypedEvent<
  [string, string, number, BigNumber],
  { pool: string; sender: string; asset: number; amount: BigNumber }
>

export type ProvidedLiquidityEventFilter =
  TypedEventFilter<ProvidedLiquidityEvent>

export type RemovedLiquidityEvent = TypedEvent<
  [string, string, BigNumber],
  { pool: string; sender: string; amount: BigNumber }
>

export type RemovedLiquidityEventFilter =
  TypedEventFilter<RemovedLiquidityEvent>

export type TokenFeeWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>

export type TokenFeeWithdrawEventFilter =
  TypedEventFilter<TokenFeeWithdrawEvent>

export interface LMTerminal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: LMTerminalInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    claimReward(
      clrPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    clrDeployer(overrides?: CallOverrides): Promise<[string]>

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      proxyAdmin: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    deploymentFee(overrides?: CallOverrides): Promise<[BigNumber]>

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      rewardsAreEscrowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    positionManager(overrides?: CallOverrides): Promise<[string]>

    provideLiquidity(
      clrPool: string,
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquidity(
      clrPool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquidityAndClaimReward(
      clrPool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    rewardEscrow(overrides?: CallOverrides): Promise<[string]>

    rewardFee(overrides?: CallOverrides): Promise<[BigNumber]>

    rewardFeesTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    tradeFee(overrides?: CallOverrides): Promise<[BigNumber]>

    uniContracts(overrides?: CallOverrides): Promise<
      [string, string, string] & {
        router: string
        quoter: string
        positionManager: string
      }
    >

    uniswapFactory(overrides?: CallOverrides): Promise<[string]>

    withdrawClaimFees(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    xTokenManager(overrides?: CallOverrides): Promise<[string]>
  }

  claimReward(
    clrPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  clrDeployer(overrides?: CallOverrides): Promise<string>

  deployIncentivizedPool(
    symbol: string,
    ticks: PositionTicksStruct,
    rewardsProgram: RewardsProgramStruct,
    pool: PoolDetailsStruct,
    proxyAdmin: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  deployUniswapPool(
    token0: string,
    token1: string,
    fee: BigNumberish,
    initPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  deployedCLRPools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  deploymentFee(overrides?: CallOverrides): Promise<BigNumber>

  getPool(
    token0: string,
    token1: string,
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  initialize(
    _xTokenManager: string,
    _rewardEscrow: string,
    _clrDeployer: string,
    _uniswapFactory: string,
    _uniContracts: UniswapContractsStruct,
    _deploymentFee: BigNumberish,
    _rewardFee: BigNumberish,
    _tradeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initiateNewRewardsProgram(
    clrPool: string,
    totalRewardAmounts: BigNumberish[],
    rewardsDuration: BigNumberish,
    rewardsAreEscrowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initiateRewardsProgram(
    clrPool: string,
    totalRewardAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  positionManager(overrides?: CallOverrides): Promise<string>

  provideLiquidity(
    clrPool: string,
    inputAsset: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeLiquidity(
    clrPool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeLiquidityAndClaimReward(
    clrPool: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  rewardEscrow(overrides?: CallOverrides): Promise<string>

  rewardFee(overrides?: CallOverrides): Promise<BigNumber>

  rewardFeesTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  tradeFee(overrides?: CallOverrides): Promise<BigNumber>

  uniContracts(overrides?: CallOverrides): Promise<
    [string, string, string] & {
      router: string
      quoter: string
      positionManager: string
    }
  >

  uniswapFactory(overrides?: CallOverrides): Promise<string>

  withdrawClaimFees(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  xTokenManager(overrides?: CallOverrides): Promise<string>

  callStatic: {
    claimReward(clrPool: string, overrides?: CallOverrides): Promise<void>

    clrDeployer(overrides?: CallOverrides): Promise<string>

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      proxyAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    deploymentFee(overrides?: CallOverrides): Promise<BigNumber>

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      rewardsAreEscrowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    positionManager(overrides?: CallOverrides): Promise<string>

    provideLiquidity(
      clrPool: string,
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    removeLiquidity(
      clrPool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    removeLiquidityAndClaimReward(
      clrPool: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    rewardEscrow(overrides?: CallOverrides): Promise<string>

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>

    rewardFeesTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    tradeFee(overrides?: CallOverrides): Promise<BigNumber>

    uniContracts(overrides?: CallOverrides): Promise<
      [string, string, string] & {
        router: string
        quoter: string
        positionManager: string
      }
    >

    uniswapFactory(overrides?: CallOverrides): Promise<string>

    withdrawClaimFees(pool: string, overrides?: CallOverrides): Promise<void>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    xTokenManager(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'ClaimFeeWithdraw(address,uint256,uint256)'(
      pool?: string | null,
      amount0?: null,
      amount1?: null
    ): ClaimFeeWithdrawEventFilter
    ClaimFeeWithdraw(
      pool?: string | null,
      amount0?: null,
      amount1?: null
    ): ClaimFeeWithdrawEventFilter

    'ClaimedReward(address,address)'(
      pool?: string | null,
      sender?: string | null
    ): ClaimedRewardEventFilter
    ClaimedReward(
      pool?: string | null,
      sender?: string | null
    ): ClaimedRewardEventFilter

    'DeployedIncentivizedPool(address)'(
      clrInstance?: string | null
    ): DeployedIncentivizedPoolEventFilter
    DeployedIncentivizedPool(
      clrInstance?: string | null
    ): DeployedIncentivizedPoolEventFilter

    'DeployedUniV3Pool(address)'(
      pool?: string | null
    ): DeployedUniV3PoolEventFilter
    DeployedUniV3Pool(pool?: string | null): DeployedUniV3PoolEventFilter

    'EthFeeWithdraw(uint256)'(amount?: null): EthFeeWithdrawEventFilter
    EthFeeWithdraw(amount?: null): EthFeeWithdrawEventFilter

    'InitiatedRewardsProgram(address,address[],uint256[],uint256)'(
      clrInstance?: string | null,
      rewardTokens?: null,
      totalRewardAmounts?: null,
      rewardsDuration?: null
    ): InitiatedRewardsProgramEventFilter
    InitiatedRewardsProgram(
      clrInstance?: string | null,
      rewardTokens?: null,
      totalRewardAmounts?: null,
      rewardsDuration?: null
    ): InitiatedRewardsProgramEventFilter

    'ManagerSet(address)'(manager?: string | null): ManagerSetEventFilter
    ManagerSet(manager?: string | null): ManagerSetEventFilter

    'ProvidedLiquidity(address,address,uint8,uint256)'(
      pool?: string | null,
      sender?: string | null,
      asset?: null,
      amount?: null
    ): ProvidedLiquidityEventFilter
    ProvidedLiquidity(
      pool?: string | null,
      sender?: string | null,
      asset?: null,
      amount?: null
    ): ProvidedLiquidityEventFilter

    'RemovedLiquidity(address,address,uint256)'(
      pool?: string | null,
      sender?: string | null,
      amount?: null
    ): RemovedLiquidityEventFilter
    RemovedLiquidity(
      pool?: string | null,
      sender?: string | null,
      amount?: null
    ): RemovedLiquidityEventFilter

    'TokenFeeWithdraw(address,uint256)'(
      token?: string | null,
      amount?: null
    ): TokenFeeWithdrawEventFilter
    TokenFeeWithdraw(
      token?: string | null,
      amount?: null
    ): TokenFeeWithdrawEventFilter
  }

  estimateGas: {
    claimReward(
      clrPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    clrDeployer(overrides?: CallOverrides): Promise<BigNumber>

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      proxyAdmin: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deploymentFee(overrides?: CallOverrides): Promise<BigNumber>

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      rewardsAreEscrowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    positionManager(overrides?: CallOverrides): Promise<BigNumber>

    provideLiquidity(
      clrPool: string,
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeLiquidity(
      clrPool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeLiquidityAndClaimReward(
      clrPool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    rewardEscrow(overrides?: CallOverrides): Promise<BigNumber>

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>

    rewardFeesTotal(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    tradeFee(overrides?: CallOverrides): Promise<BigNumber>

    uniContracts(overrides?: CallOverrides): Promise<BigNumber>

    uniswapFactory(overrides?: CallOverrides): Promise<BigNumber>

    withdrawClaimFees(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    xTokenManager(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    claimReward(
      clrPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    clrDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    deployIncentivizedPool(
      symbol: string,
      ticks: PositionTicksStruct,
      rewardsProgram: RewardsProgramStruct,
      pool: PoolDetailsStruct,
      proxyAdmin: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    deployUniswapPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      initPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    deployedCLRPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    deploymentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPool(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _xTokenManager: string,
      _rewardEscrow: string,
      _clrDeployer: string,
      _uniswapFactory: string,
      _uniContracts: UniswapContractsStruct,
      _deploymentFee: BigNumberish,
      _rewardFee: BigNumberish,
      _tradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initiateNewRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      rewardsDuration: BigNumberish,
      rewardsAreEscrowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initiateRewardsProgram(
      clrPool: string,
      totalRewardAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    provideLiquidity(
      clrPool: string,
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeLiquidity(
      clrPool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeLiquidityAndClaimReward(
      clrPool: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    rewardEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardFeesTotal(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tradeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    uniContracts(overrides?: CallOverrides): Promise<PopulatedTransaction>

    uniswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawClaimFees(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    xTokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
